# Week 2: Hirh order functions (HOF)

Functional languages have functions as *first class values*.
It means that like any other value fucntions can passed as parameter in a function or enter from it.

Functions that take other functions as parameters called *high order fucntions*.

fucntions w/o name - anonymous function:

x => x * x * x   "=>" function type. Using for anonymous functions.
(a: Int) => Body

## Currying
sum(cube)(1, 10) == (sum (cube)) (1, 10):
Firstly we return function that return other function:
sum(cube) first function and than 

List nested of abonymous functions is called Curryng,
We can def:
f(x1, x2, ... xn) = E into  f(x1) => x2 => ... => xn => E

## Preconditions VS assertations:
*assert* means that program has reached an inconsistente state. It is problem current function/method/code
*require* means that caller of the method is fault and should fix its call.

## Operators, infix notation
###Arity-0 - it is method w/o arguments:
```
reply()
reple
```
Should use this syntax for methods w/o side-effects (purely-functionality).

### Infix notation:
`x max y`   else   `x.max(y)`

Use infix operators for single parameter functions. Drop use it for multi-parameter!!!

***

Trait is like abstract class: interface that can store a implementation.
Traits are used to share interfaces and fields between classes. They are similar to Java 8â€™s interfaces.
Java 8 interface changes include static methods and default methods in interfaces. Prior to Java 8, we could have only method declarations in the interfaces. But from Java 8, we can have default methods and static methods in the interfaces.
